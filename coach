<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RealEstate Pro Coach</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/lucide.min.css" rel="stylesheet">
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;
        
        // Lucide icons as components
        const User = () => <svg className="lucide lucide-user" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>;
        const Target = () => <svg className="lucide lucide-target" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="6"/><circle cx="12" cy="12" r="2"/></svg>;
        const Users = () => <svg className="lucide lucide-users" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="m22 21-2-2"/><path d="m16 17-2-2"/></svg>;
        const Calendar = () => <svg className="lucide lucide-calendar" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" x2="16" y1="2" y2="6"/><line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/></svg>;
        const TrendingUp = () => <svg className="lucide lucide-trending-up" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><polyline points="22,7 13.5,15.5 8.5,10.5 2,17"/><polyline points="16,7 22,7 22,13"/></svg>;
        const CheckCircle = () => <svg className="lucide lucide-check-circle" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><polyline points="22,4 12,14.01 9,11.01"/></svg>;
        const Plus = () => <svg className="lucide lucide-plus" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><path d="M5 12h14"/><path d="M12 5v14"/></svg>;
        const Phone = () => <svg className="lucide lucide-phone" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"/></svg>;
        const Mail = () => <svg className="lucide lucide-mail" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><rect width="20" height="16" x="2" y="4" rx="2"/><path d="m22 7-10 5L2 7"/></svg>;
        const DollarSign = () => <svg className="lucide lucide-dollar-sign" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><line x1="12" x2="12" y1="2" y2="22"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>;
        const Clock = () => <svg className="lucide lucide-clock" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><circle cx="12" cy="12" r="10"/><polyline points="12,6 12,12 16,14"/></svg>;
        const Award = () => <svg className="lucide lucide-award" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><circle cx="12" cy="8" r="6"/><path d="m15.477 12.89 1.515 8.526a.5.5 0 0 1-.81.47l-3.58-2.687a1 1 0 0 0-1.197 0l-3.586 2.686a.5.5 0 0 1-.81-.469l1.514-8.526"/></svg>;
        const BookOpen = () => <svg className="lucide lucide-book-open" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg>;
        const AlertCircle = () => <svg className="lucide lucide-alert-circle" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="8" y2="12"/><line x1="12" x2="12.01" y1="16" y2="16"/></svg>;
        const Activity = () => <svg className="lucide lucide-activity" fill="none" height="24" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" viewBox="0 0 24 24" width="24"><path d="m22 12-4-4-6 6-4-4-4 4"/></svg>;

        const RealEstateCoachingPlatform = () => {
            const [activeTab, setActiveTab] = useState('dashboard');
            const [tasks, setTasks] = useState([
                { id: 1, title: 'Call 5 expired listings', category: 'prospecting', completed: false, priority: 'high', dueDate: '2025-05-25' },
                { id: 2, title: 'Update CRM with new contacts', category: 'admin', completed: true, priority: 'medium', dueDate: '2025-05-24' },
                { id: 3, title: 'Schedule listing presentation', category: 'sales', completed: false, priority: 'high', dueDate: '2025-05-26' },
                { id: 4, title: 'Research neighborhood comps', category: 'research', completed: false, priority: 'medium', dueDate: '2025-05-27' }
            ]);
            
            const [leads, setLeads] = useState([
                { id: 1, name: 'John Smith', email: 'john@email.com', phone: '555-0123', status: 'hot', source: 'website', value: 450000, lastContact: '2025-05-24' },
                { id: 2, name: 'Sarah Johnson', email: 'sarah@email.com', phone: '555-0124', status: 'warm', source: 'referral', value: 320000, lastContact: '2025-05-23' },
                { id: 3, name: 'Mike Davis', email: 'mike@email.com', phone: '555-0125', status: 'cold', source: 'cold call', value: 275000, lastContact: '2025-05-22' }
            ]);

            const [currentLesson, setCurrentLesson] = useState(0);
            const [completedLessons, setCompletedLessons] = useState(new Set([0, 1]));
            
            const lessons = [
                { title: 'Setting Your Foundation', duration: '15 min', description: 'Learn the basics of successful real estate practices' },
                { title: 'Prospecting Strategies', duration: '20 min', description: 'Master lead generation techniques that work' },
                { title: 'Converting Leads to Clients', duration: '25 min', description: 'Turn prospects into paying customers' },
                { title: 'Listing Presentations', duration: '30 min', description: 'Create compelling presentations that win listings' },
                { title: 'Negotiation Mastery', duration: '35 min', description: 'Advanced negotiation tactics for better deals' },
                { title: 'Building Your Network', duration: '20 min', description: 'Develop relationships that generate referrals' }
            ];

            const habits = [
                { id: 1, name: 'Make 20 prospecting calls', target: 20, completed: 15, streak: 3 },
                { id: 2, name: 'Send 10 follow-up emails', target: 10, completed: 8, streak: 5 },
                { id: 3, name: 'Add 5 new leads to CRM', target: 5, completed: 3, streak: 2 },
                { id: 4, name: 'Post on social media', target: 1, completed: 1, streak: 7 }
            ];

            const [newLead, setNewLead] = useState({
                name: '',
                email: '',
                phone: '',
                source: 'website',
                value: ''
            });

            const [newTask, setNewTask] = useState({
                title: '',
                category: 'prospecting',
                priority: 'medium',
                dueDate: ''
            });

            const addLead = () => {
                if (newLead.name && newLead.email) {
                    const lead = {
                        id: leads.length + 1,
                        ...newLead,
                        status: 'cold',
                        lastContact: new Date().toISOString().split('T')[0],
                        value: parseInt(newLead.value) || 0
                    };
                    setLeads([...leads, lead]);
                    setNewLead({ name: '', email: '', phone: '', source: 'website', value: '' });
                }
            };

            const addTask = () => {
                if (newTask.title) {
                    const task = {
                        id: tasks.length + 1,
                        ...newTask,
                        completed: false,
                        dueDate: newTask.dueDate || new Date().toISOString().split('T')[0]
                    };
                    setTasks([...tasks, task]);
                    setNewTask({ title: '', category: 'prospecting', priority: 'medium', dueDate: '' });
                }
            };

            const toggleTask = (id) => {
                setTasks(tasks.map(task => 
                    task.id === id ? { ...task, completed: !task.completed } : task
                ));
            };

            const completeLesson = (index) => {
                setCompletedLessons(new Set([...completedLessons, index]));
            };

            const getStatusColor = (status) => {
                switch (status) {
                    case 'hot': return 'text-red-600 bg-red-100';
                    case 'warm': return 'text-orange-600 bg-orange-100';
                    case 'cold': return 'text-blue-600 bg-blue-100';
                    default: return 'text-gray-600 bg-gray-100';
                }
            };

            const getPriorityColor = (priority) => {
                switch (priority) {
                    case 'high': return 'border-l-red-500';
                    case 'medium': return 'border-l-yellow-500';
                    case 'low': return 'border-l-green-500';
                    default: return 'border-l-gray-500';
                }
            };

            const renderDashboard = () => (
                React.createElement('div', { className: 'space-y-6' },
                    React.createElement('div', { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6' },
                        React.createElement('div', { className: 'bg-gradient-to-r from-blue-500 to-blue-600 p-6 rounded-xl text-white' },
                            React.createElement('div', { className: 'flex items-center justify-between' },
                                React.createElement('div', null,
                                    React.createElement('p', { className: 'text-blue-100' }, 'Active Leads'),
                                    React.createElement('p', { className: 'text-3xl font-bold' }, leads.length)
                                ),
                                React.createElement(Users, { className: 'h-8 w-8 text-blue-200' })
                            )
                        ),
                        React.createElement('div', { className: 'bg-gradient-to-r from-green-500 to-green-600 p-6 rounded-xl text-white' },
                            React.createElement('div', { className: 'flex items-center justify-between' },
                                React.createElement('div', null,
                                    React.createElement('p', { className: 'text-green-100' }, 'Pipeline Value'),
                                    React.createElement('p', { className: 'text-3xl font-bold' }, `$${(leads.reduce((sum, lead) => sum + lead.value, 0) / 1000).toFixed(0)}K`)
                                ),
                                React.createElement(DollarSign, { className: 'h-8 w-8 text-green-200' })
                            )
                        ),
                        React.createElement('div', { className: 'bg-gradient-to-r from-purple-500 to-purple-600 p-6 rounded-xl text-white' },
                            React.createElement('div', { className: 'flex items-center justify-between' },
                                React.createElement('div', null,
                                    React.createElement('p', { className: 'text-purple-100' }, 'Tasks Complete'),
                                    React.createElement('p', { className: 'text-3xl font-bold' }, `${tasks.filter(t => t.completed).length}/${tasks.length}`)
                                ),
                                React.createElement(CheckCircle, { className: 'h-8 w-8 text-purple-200' })
                            )
                        ),
                        React.createElement('div', { className: 'bg-gradient-to-r from-orange-500 to-orange-600 p-6 rounded-xl text-white' },
                            React.createElement('div', { className: 'flex items-center justify-between' },
                                React.createElement('div', null,
                                    React.createElement('p', { className: 'text-orange-100' }, 'Lessons Done'),
                                    React.createElement('p', { className: 'text-3xl font-bold' }, `${completedLessons.size}/${lessons.length}`)
                                ),
                                React.createElement(BookOpen, { className: 'h-8 w-8 text-orange-200' })
                            )
                        )
                    ),
                    React.createElement('div', { className: 'grid grid-cols-1 lg:grid-cols-2 gap-6' },
                        React.createElement('div', { className: 'bg-white p-6 rounded-xl shadow-lg' },
                            React.createElement('h3', { className: 'text-xl font-bold mb-4 flex items-center' },
                                React.createElement(Target, { className: 'mr-2 text-blue-600' }),
                                'Daily Habits Progress'
                            ),
                            React.createElement('div', { className: 'space-y-4' },
                                habits.map(habit =>
                                    React.createElement('div', { key: habit.id, className: 'space-y-2' },
                                        React.createElement('div', { className: 'flex justify-between items-center' },
                                            React.createElement('span', { className: 'font-medium' }, habit.name),
                                            React.createElement('span', { className: 'text-sm text-gray-600' }, `${habit.completed}/${habit.target}`)
                                        ),
                                        React.createElement('div', { className: 'w-full bg-gray-200 rounded-full h-2' },
                                            React.createElement('div', {
                                                className: 'bg-blue-600 h-2 rounded-full transition-all duration-300',
                                                style: { width: `${(habit.completed / habit.target) * 100}%` }
                                            })
                                        ),
                                        React.createElement('div', { className: 'flex items-center text-sm text-gray-600' },
                                            React.createElement(Award, { className: 'h-4 w-4 mr-1' }),
                                            `${habit.streak} day streak`
                                        )
                                    )
                                )
                            )
                        ),
                        React.createElement('div', { className: 'bg-white p-6 rounded-xl shadow-lg' },
                            React.createElement('h3', { className: 'text-xl font-bold mb-4 flex items-center' },
                                React.createElement(AlertCircle, { className: 'mr-2 text-red-600' }),
                                'Urgent Tasks'
                            ),
                            React.createElement('div', { className: 'space-y-3' },
                                tasks.filter(task => !task.completed && task.priority === 'high').map(task =>
                                    React.createElement('div', { key: task.id, className: `p-3 border-l-4 ${getPriorityColor(task.priority)} bg-gray-50 rounded` },
                                        React.createElement('div', { className: 'flex items-center justify-between' },
                                            React.createElement('span', { className: 'font-medium' }, task.title),
                                            React.createElement('button', {
                                                onClick: () => toggleTask(task.id),
                                                className: 'text-green-600 hover:text-green-800'
                                            },
                                                React.createElement(CheckCircle, { className: 'h-5 w-5' })
                                            )
                                        ),
                                        React.createElement('p', { className: 'text-sm text-gray-600 mt-1' }, `Due: ${task.dueDate}`)
                                    )
                                )
                            )
                        )
                    )
                )
            );

            const tabs = [
                { id: 'dashboard', label: 'Dashboard', icon: TrendingUp },
                { id: 'leads', label: 'Leads', icon: Users },
                { id: 'tasks', label: 'Tasks', icon: CheckCircle }
            ];

            return React.createElement('div', { className: 'min-h-screen bg-gray-100' },
                React.createElement('div', { className: 'bg-white shadow-sm border-b' },
                    React.createElement('div', { className: 'max-w-7xl mx-auto px-4 sm:px-6 lg:px-8' },
                        React.createElement('div', { className: 'flex justify-between items-center py-4' },
                            React.createElement('div', { className: 'flex items-center space-x-3' },
                                React.createElement('div', { className: 'bg-blue-600 p-2 rounded-lg' },
                                    React.createElement(User, { className: 'h-6 w-6 text-white' })
                                ),
                                React.createElement('div', null,
                                    React.createElement('h1', { className: 'text-2xl font-bold text-gray-900' }, 'RealEstate Pro Coach'),
                                    React.createElement('p', { className: 'text-gray-600' }, 'Your path to real estate success')
                                )
                            ),
                            React.createElement('div', { className: 'flex items-center space-x-4' },
                                React.createElement('div', { className: 'text-right' },
                                    React.createElement('p', { className: 'font-semibold' }, 'Welcome back, Agent!'),
                                    React.createElement('p', { className: 'text-sm text-gray-600' }, "Let's crush your goals today")
                                )
                            )
                        )
                    )
                ),
                React.createElement('div', { className: 'max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8' },
                    React.createElement('div', { className: 'flex flex-wrap gap-2 mb-8' },
                        tabs.map(tab => {
                            const Icon = tab.icon;
                            return React.createElement('button', {
                                key: tab.id,
                                onClick: () => setActiveTab(tab.id),
                                className: `flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-colors ${
                                    activeTab === tab.id
                                        ? 'bg-blue-600 text-white'
                                        : 'bg-white text-gray-700 hover:bg-gray-50'
                                }`
                            },
                                React.createElement(Icon, { className: 'h-4 w-4' }),
                                React.createElement('span', null, tab.label)
                            );
                        })
                    ),
                    activeTab === 'dashboard' && renderDashboard()
                )
            );
        };

        ReactDOM.render(React.createElement(RealEstateCoachingPlatform), document.getElementById('root'));
    </script>
</body>
</html>
